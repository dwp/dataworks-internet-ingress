terraform {
  required_version = "{{terraform_12_version}}"

  backend "s3" {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/dataworks-internet-ingress.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "management" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/management.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "management_dns" {
  backend   = "s3"
  workspace = "management"

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/management.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "ingest" {
  backend   = "s3"
  workspace = terraform.workspace == "default" ? "default" : "production"

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-ingestion.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "aws_region" "current" {
}

provider "aws" {
  version = "~> 3.0.0"
  region  = var.region

  assume_role {
    role_arn = "arn:aws:iam::${lookup(local.account, local.environment)}:role/${var.assume_role}"
  }
}

provider "aws" {
  version = "~> 3.0.0"
  region  = var.region
  alias   = "management_dns"

  assume_role {
    role_arn = "arn:aws:iam::${local.account["management"]}:role/${var.assume_role}"
  }
}

provider "aws" {
  version = "~> 3.0.0"
  region  = var.region
  alias   = "target"

  assume_role {
    role_arn = "arn:aws:iam::${local.account[local.mgmt_account_mapping[local.environment]]}:role/${var.assume_role}"
  }
}

provider "aws" {
  version = "~> 3.0.0"
  region  = var.region
  alias   = "ssh_bastion"

  assume_role {
    role_arn = "arn:aws:iam::${local.account[local.environment]}:role/${var.assume_role}"
  }
}

locals {
  name        = "dataworks-internet-ingress"
  environment = terraform.workspace == "default" ? "management-dev" : terraform.workspace

  account = {
    {%- for key, value in accounts.items() %}
      {{key}} = "{{value}}"
    {%- endfor %}
  }

  team_cidr_block = "{{ucfs.team_cidr_block}}"

  common_tags = {
    {%- for key, value in common_tags.items() %}
      {{key}} = "{{value}}"
    {%- endfor %}
    Name         = local.name
    Environment  = local.environment
    Application  = local.name
    Persistence  = "True"
    AutoShutdown = "False"
    Costcode     = var.costcode
    Team         = "DataWorks"
  }

  cidr_block = {
  {%- for environment, ranges in cidr_block.items() %}
      {{ environment }} = {
        {%- for key, value in ranges.items() %}
          {{ key }} = "{{ value }}"{% endfor %}
      } {%- endfor %}
  }
}

data "aws_availability_zones" "available" {
}
